"""
Django settings for bookstore_project project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =  int(os.environ.get('DEBUG',default=0))

ALLOWED_HOSTS = []

DEFAULT_FROM_EMAIL = 'admin@bookstore.com'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Third-party
    'crispy_forms',  # for bootstrap

    'allauth',  # new
    'allauth.account',  # new
    "allauth.socialaccount", #for social accounts

     # social providers
    "allauth.socialaccount.providers.github", # for github login
    "allauth.socialaccount.providers.twitter", # new

    # Local
    'books',
    'users',  # new
    'pages',
    'orders',

]

# django-allauth config
SITE_ID = 1
ACCOUNT_SESSION_REMEMBER = True  # remember login session when use remember me
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False #keep one password field in signup


# Only Email Name authentication
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True



AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Django attempt to authenticate a user
    'allauth.account.auth_backends.AuthenticationBackend',  # new
)

# For Transactional email and marketting
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'




CRISPY_TEMPLATE_PACK = 'bootstrap4'
# add {{ form|crispy }} to replace {{ form.as_p}} for displaying form fields


AUTH_USER_MODEL = 'users.CustomUser'  # new

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookstore_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases


LOGIN_REDIRECT_URL = 'home'  # redirecting in home page after login
ACCOUNT_LOGOUT_REDIRECT = 'home'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#stripe
STRIPE_TEST_PUBLISHABLE_KEY=os.environ.get('STRIPE_TEST_PUBLISHABLE_KEY')
STRIPE_TEST_SECRET_KEY=os.environ.get('STRIPE_TEST_SECRET_KEY')



# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]  # can add multiple folder ,this it top level static folder
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # This is the location of static files in production level

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

MEDIA_URL = '/media/' # for user input media file
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # for using in templates



'''
The FileSystemFinder looks within the STATICFILES_DIRS setting, which we set to
static, for any static files. Then the AppDirectoriesFinder looks for any directories
named static located within an app, as opposed to located at a project-level static
directory. This setting is read top-to-bottom meaning if a file called static/img.jpg
is first found by FileSystemFinder it will be in place of an img.jpg file located within,
say, the pages app at pages/static/img.jpg
   structure like:
       project_name
        - deploy
        - app_name
          - migrations
          ...
          - static
            - app_name
              - css
              - fonts
              - img
              - js
              - tinymce
          - templates
            - app_name
              - item.html
              - list.html
        - project_name
        - __init__.py
        - manage.py
'''
